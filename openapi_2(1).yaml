openapi: 3.0.3
info:
  title: Swagger Library - OpenAPI 3.0
  description: |-
    This is a sample Document Library Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the document library, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Library, then click [here](https://editor.swagger.io/?url=https://documentlibrary.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Library OAS 2.0` menu option!_
    
    Some useful links:
    - [The Document Library repository](https://github.com/swagger-api/swagger-documentlibrary)
    - [The source API definition for the Document Library](https://github.com/swagger-api/swagger-documentlibrary/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://documentlibrary3.swagger.io/api/v3
tags:
  - name: document
    description: Everything about your Documents
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: library
    description: Access to Library orders
    externalDocs:
      description: Find out more about our library
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /document:
    put:
      tags:
        - document
      summary: Update a exist document
      description: Update a exist document by Id
      operationId: updateDocument
      requestBody:
        description: Update a exist document in the library
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
          application/xml:
            schema:
              $ref: '#/components/schemas/Document'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Document'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid ID supplied
        '404':
          description: Document not found
        '405':
          description: Validation exception
      security:
        - documentlibrary_auth:
            - write:documents
            - read:documents
    post:
      tags:
        - document
      summary: add document to library
      description: Add document to library
      operationId: addDocument
      requestBody:
        description: Create a document in the library
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
          application/xml:
            schema:
              $ref: '#/components/schemas/Document'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Document'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Document'
        '405':
          description: Invalid input
      security:
        - documentlibrary_auth:
            - write:documents
            - read:documents
  /document/findByName:
    get:
      tags:
        - document
      summary: Finds Documents by name
      description: Finds document by name
      operationId: findDocumentsByName
      parameters:
        - name: name
          in: query
          description: Name to filter by
          required: false
          explode: true
          schema:
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '400':
          description: Invalid tag value
      security:
        - documentlibrary_auth:
            - write:documents
            - read:documents
  /library/stock:
    get:
      tags:
        - library
      summary: Returns document stock
      description: Returns stock of documents
      operationId: getInventory
      parameters:
        - name: name
          in: query
          description: Name to filter by
          required: false
          explode: true
          schema:
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                example: 30
      security:
        - api_key: []
  /library/order:
    post:
      tags:
        - library
      summary: Place an order for a document
      description: Place a new order in the library
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prestamo'
          application/xml:
            schema:
              $ref: '#/components/schemas/Prestamo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Prestamo'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prestamo'
        '405':
          description: Invalid input
        '500':
          description: Internal server error
    put:
      tags:
        - library
      summary: Update order
      description: Update order in the library
      operationId: updateOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prestamo'
          application/xml:
            schema:
              $ref: '#/components/schemas/Prestamo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Prestamo'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prestamo'
        '405':
          description: Invalid input
        '500':
          description: Internal server error
  /library/order/{orderId}:
    get:
      tags:
        - library
      summary: Find order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prestamo'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Prestamo'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        '500':
          description: Internal server error
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the library
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
components:
  schemas:
    Prestamo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        id_user:
          type: integer
          format: int64
          example: 198772
        fecha_prestamo:
          type: string
          format: date
        fecha_dev:
          type: string
          format: date
        fecha_dev_real:
          type: string
          format: date
      xml:
        name: order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        nombre:
          type: string
          example: John
        apellido_p:
          type: string
          example: James
        apellido_m:
          type: string
          example: Williams
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        foto:
          type: boolean
          description: User Status
          format: int32
          example: 1
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: user
    Address:
      type: object
      properties:
        calle:
          type: string
          example: 437 Lytton
        ciudad:
          type: string
          example: Palo Alto
        region:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Catalogo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        titulo:
          type: string
          example: Libros
      xml:
        name: catalogo
    Document:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        nombre:
          type: string
          example: The art of war
        stock:
          type: integer
          example: 30
      xml:
        name: document
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Document:
      description: Document object that needs to be added to the library
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Document'
        application/xml:
          schema:
            $ref: '#/components/schemas/Document'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    documentlibrary_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://documentlibrary3.swagger.io/oauth/authorize
          scopes:
            write:documents: modify documents in your account
            read:documents: read your documents
    api_key:
      type: apiKey
      name: api_key
      in: header