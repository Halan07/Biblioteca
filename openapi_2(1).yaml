openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: document
    description: Everything about documents
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: library
    description: Access to library orders
    externalDocs:
      description: Find out more about our library
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /inventory/book:
    put:
      tags:
        - document
      summary: Update an existing book
      description: Update an existing book by Id
      operationId: updateBook
      parameters:
        - name: id_libro
          in: query
          description: id of book that need to be modified
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent book in the library
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
          application/xml:
            schema:
              $ref: '#/components/schemas/Book'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '304':
          description: Not modified
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '404':
          description: Book not found
        '405':
          description: Validation exception
        'default':
          description: Internal server error
    post:
      tags:
        - document
      summary: Add a new book to the library
      description: Add a new book to the library
      operationId: addBook
      requestBody:
        description: Create a new book in the library
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
          application/xml:
            schema:
              $ref: '#/components/schemas/Book'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '405':
          description: Invalid input
        'default':
          description: Internal server error
  /inventory/multimedia:
    put:
      tags:
        - document
      summary: Update an existing multimedia
      description: Update an existing multimedia by Id
      operationId: updateMultimedia
      parameters:
        - name: id_multimedia
          in: query
          description: id of multimedia that need to be modified
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent multimedia in the library
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Multimedia'
          application/xml:
            schema:
              $ref: '#/components/schemas/Multimedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Multimedia'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Multimedia'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Multimedia'
        '304':
          description: Not modified
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '404':
          description: Multimedia not found
        '405':
          description: Validation exception
        'default':
          description: Internal server error
    post:
      tags:
        - document
      summary: Add a new book to the library
      description: Add a new book to the library
      operationId: addMultimedia
      requestBody:
        description: Create a new book in the library
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Multimedia'
          application/xml:
            schema:
              $ref: '#/components/schemas/Multimedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Multimedia'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Multimedia'
            application/xml:
              schema:
                $ref: '#/components/schemas/Multimedia'
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '405':
          description: Invalid input
        'default':
          description: Internal server error  
  /catalogue/{filtro}:
    get:
      tags:
        - library
      summary: Returns documents object
      description: Returns documents object
      operationId: getDocuments
      parameters:
        - name: filtro
          in: path
          description: 'The filter that needs to be fetched. Use Books for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalogue'
            application/xml:
              schema:
                $ref: '#/components/schemas/Catalogue'
        '400':
          description: Invalid filter supplied
        '404':
          description: filter not found
        'default':
          description: Internal Server Error
  /library/order:
    post:
      tags:
        - library
      summary: Place an order for documents
      description: Place a new order in the library
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
        '405':
          description: Invalid input
    put:
      tags:
        - library
      summary: Update an order
      description: Update an order in the library
      operationId: updateOrder
      parameters:
        - name: id_prestamo
          in: query
          description: 'The order that needs to be fetched.'
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
        '405':
          description: Invalid input
        'default':
          description: Internal Server Error
  /library/order/{id_prestamo}:
    get:
      tags:
        - library
      summary: Find orders by ID
      description: Find orders by ID
      operationId: getOrders
      parameters:
        - name: id_prestamo
          in: path
          description: 'The id_prestamo that needs to be fetched.'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '404':
          description: ID not found
        '405':
          description: Invalid input
        'default':
          description: Internal Server Error
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The email for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
        '404':
          description: email not found
        '405':
          description: Validation exception
        'default':
          description: Internal server error
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{email}:
    get:
      tags:
        - user
      summary: Get user by email
      description: ''
      operationId: getUserByEmail
      parameters:
        - name: email
          in: path
          description: 'The email that needs to be fetched. Use john@email.com for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid email supplied
        '404':
          description: User not found
  /user/{password}:
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: password
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the library
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
        '400':
          description: Invalid password
components:
  schemas:
    Tipo_prestamo:
      type: object
      properties:
        id_tipo:
          type: integer
          example: 437
        tipo_prestamo:
          type: string
          description: Tipo de prestamo realizado
          enum:
            - A domicilio
            - En biblioteca
      xml:
        name: tipo_prestamo
    Estado:
      type: object
      properties:
        id_estado:
          type: integer
          example: 437
        estado:
          type: string
          description: Estado del prestamo realizado
          enum:
            - Para entregar
            - Prestado
            - Atrasado
            - Devuelto
      xml:
        name: estado
    Order:
      type: object
      properties:
        id_prestamo:
          type: integer
          format: int64
          example: 10
        id_usuario:
          type: integer
          format: int64
          example: 198772
        fecha_prestamo:
          type: string
          format: date
        fecha_devolucion:
          type: string
          format: date
        fecha_devolucion_real:
          type: string
          description: date
        tipo_prestamo:
          type: array
          xml:
            name: tipo_prestamo
            wrapped: true
          items:
            $ref: '#/components/schemas/Tipo_prestamo'
        estado:
          type: array
          xml:
            name: estado
            wrapped: true
          items:
            $ref: '#/components/schemas/Estado'
      xml:
        name: order
    User:
      type: object
      properties:
        id_usuario:
          type: integer
          format: int64
          example: 10
        rut:
          type: string
          example: 12345678-9
        nombre:
          type: string
          example: John
        apellido:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        telefono:
          type: string
          example: '12345'
        direccion:
          type: string
          example: Haban 458
        region: 
          type: string
          example: Valaparaiso
        prestamo:
          type: array
          xml:
            name: prestamo
            wrapped: false
          items:
            $ref: '#/components/schemas/Order'
      xml:
        name: user
    Book:
      type: object
      properties:
        id_libro:
          type: integer
          format: int64
          example: 1
        nombre:
          type: string
          example: The art of war
        stock:
          type: integer
          format: int64
          example: 10
        genero:
          type: string
          example: Literatura clasica
        autor:
          type: string
          example: Sun Tzu
        editorial:
          type: string
          example: Alfaguara
      xml:
        name: book
    Multimedia:
      type: object
      properties:
        id_multimedia:
          type: integer
          format: int64
          example: 1
        nombre:
          type: string
          example: La casa de papel
        stock:
          type: integer
          format: int64
          example: 2
        tipo:
          type: string
          description: Tipo de formato multimedia
          enum:
            - DVD
            - CD
            - Casete
            - Blueray
      xml:
        name: multimedia
    Catalogue:
      type: object
      properties:
        id_catalogue:
          type: integer
          format: int64
          example: 1
        titulo:
          type: string
          example: Libros
        filtro:
          type: string
          description: Genero por el cual desea filtrar
          enum:
            - Books
            - Multimedia
        libro:
          type: array
          xml:
            name: book
            wrapped: true
          items:
            $ref: '#/components/schemas/Book'
        multimedia:
          type: array
          xml:
            name: multimedia
            wrapped: true
          items:
            $ref: '#/components/schemas/Multimedia'
      xml:
        name: catalogue
